pipeline {
    agent any

    environment {
        repositoryName = 'flask-compose'
        dockerHubUsername = 'noaavisrur'
    }
     stages{
        stage('Clean up & clone') {
            steps {
                sh 'sudo rm -rf *'
                sh 'git clone https://github.com/noaavisrur/flask-project.git'
            }
        }
        stage('Build and Push Docker Image') {
            steps {
                dir('flask-project/jenkins') {
                    sh "python3 versions-compose.py"
                }
            }
        }

        stage('testing') {
            steps {
                sh 'sudo kubectl config use-context rancher-desktop'
                sh 'sudo kubectl delete deployments --all'
                sh 'sudo kubectl delete services --all'
                sh 'sudo kubectl apply -f /var/lib/jenkins/workspace/kubecloud_pipeline/flask-project/kubernetes/flaskdb_kube.yml'
                sh 'sudo kubectl get nodes -o wide'
            }
        }

        stage('deploy to prod') {
            steps {
                withCredentials([file(credentialsId: 'gcloud-creds', variable: 'GCLOUD_CREDS')]) {
                    sh 'sudo gcloud auth activate-service-account --key-file="$GCLOUD_CREDS"'
                    sh 'sudo gcloud container clusters get-credentials flask-cluster1 --region us-east1 --project disco-rope-393211'
                    sh 'sudo kubectl delete deployments --all'
                    sh 'sudo kubectl delete services --all'
                    sh 'sudo kubectl apply -f /var/lib/jenkins/workspace/kubecloud_pipeline/flask-project/kubernetes/flaskdb_kube.yml'
                    sh 'sudo kubectl get nodes -o wide'
            }
        }
    }
}
}
